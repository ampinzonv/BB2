#!/usr/bin/env bash
#
#                  .:: BioBASH ::.
# 
# DESCRIPTION:
# Retrieves general quality statistics from a FASTQ file
#
# AUTHOR:
# Andrés Pinzón (ampinzonv@unal.edu.co)
# Bioinformatics and Systems Biology Laboratory [http://gibbs.unal.edu.co/]  
# Institute for Genetics  [https://genetica.unal.edu.co]
# National University of Colombia [https://unal.edu.co]
#
# COPYRIGHT:
# Please refer to https://github.com/ampinzonv/BB2/blob/main/LICENSE
#

source $BIOBASH_NATIVE_LIB_PATH/BBseq.sh
source $BASHUTILITY_LIB_PATH/feedback.sh;
source $BASHUTILITY_LIB_PATH/file.sh;

# ........................................................................
#
#    HELP VARS
#
# ........................................................................
helpDesc="Retrieves basic statistics from a FASTQ file"
helpUsage="bb_get_fastq_quality -i <FASTQ file> [options]
Options:

-i | --input    (required) path to a file.
-r | --report   (optional) Show average, max and min quality score and number of sequences.
-q | --quality  (optional) fastq quality encoding. available values: 'sanger', 'solexa', 'illumina-1.3+', 'illumina-1.5+', 'illumina-1.8+'. (default "sanger")
-j | --jobs     (optional) Number of CPU cores to use.

Examples:

Display each sequence quality average
bb_get_fastq_quality -i file.fastq
8.51
10.43
7.27
8.66
7.75
8.85
8.19
Display quality report for all sequences in file:
bb_get_fastq_info -i file.fastq --report
File name       numseqs   sumlen   minlen   avg_len   max_len   Q20(%)   Q30(%)
example.fastq   4437      883678   115      199.2     438       26.63    6.09

"

# ........................................................................
#
#               CHECK IF EMPTY DISPLAY HELP
#
# ........................................................................
# If not arguments are passed show help

#               CHECK DATA STREAM
# Since BBfile:::multiple_fasta_to_singles supports data stream, 
# it is necessary to tell this script that it is so. 


if [ $# -eq 0 ]; then

    # Maybe data comes as stream
    pipe=$(io::is_pipe)

    # If data stream true    
    if [ $pipe -eq 0 ]; then
        #Then capture data
        file=$(io::stream_to_tmp_file)
        cat "${file}" | BBSeq::get_fastq_quality "$@"
        exit 1
    else
        # DO NOT FORGET to quote the variables.
        feedback::help  "$helpDesc" "$helpUsage"
        exit 0
    fi

fi


# ........................................................................
#
#               JUST RUN
# Notice that we reach this point ONLY IF data does not come as a STREAM.
# ........................................................................

BBSeq::get_fastq_quality "$@"