{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"BBList/","text":"BioBash List","title":"Lists"},{"location":"BBList/#biobash-list","text":"","title":"BioBash List"},{"location":"BBalign/","text":"BioBash Alignments","title":"Alignment"},{"location":"BBalign/#biobash-alignments","text":"","title":"BioBash Alignments"},{"location":"BBannotation/","text":"BioBash Annotation","title":"Annotation"},{"location":"BBannotation/#biobash-annotation","text":"","title":"BioBash Annotation"},{"location":"BBdb/","text":"BioBash Databases","title":"Databases"},{"location":"BBdb/#biobash-databases","text":"","title":"BioBash Databases"},{"location":"BBfile/","text":"BioBash File Overview This module contains functions to operate over bioinformatics files not over its content (for that matter BBFormat or BBSeq could be a better option). For general operations over files of any kind refer to bb_utility/io.sh file. Index BBfile::is_fasta BBfile::is_multiple_fasta BBfile::is_fastq BBfile::fastq_to_fasta BBfile::multiple_fasta_to_singles BBfile::uncompress BBfile::guess_sequence_type BBfile::is_fasta Checks if a file is valid fasta file. Example file::file_is_fasta -i/--input \"./file.fa[,fasta]\" #Output Returns 0 if file is fasta, 1 if it is not. Exit codes 0 : On success 1 : On failure BBfile::is_multiple_fasta Checks if a file is a valid multiple fasta. Example file::file_is_multiple_fasta -i/--input file.fa[,fasta] #Output 0 Exit codes 0 : 1 : BBfile::is_fastq Checks if a file is valid fastq file. Example file::is_fastq \"./file.fq\" #Output 0 Arguments $1 (path): to fastq file. Exit codes 0 : 1 : 2 : BBfile::fastq_to_fasta Transforms a fastq file into a fasta file. if only the fastq file argument is given it outputs the fasta format in STDOUT. This input file can be compressed in gz format. If a second (optional) argument is given (a string containing the desired name for FASTA output file) STDOUT is then redirected to a file. If the string has a \".gz\" extension, the output is also compressed. Example BBfile_fastq_to_fasta \"./file.fastq[.gz]\" #Output file in FASTA format in STDOUT #Example 2 BBfile_fastq_to_fasta \"./file.fastq[.gz]\" file.fa[.gz] #Output ./file.fa[.gz] Exit codes 0 : On succes 1 : On failure BBfile::multiple_fasta_to_singles Splits a multiple fasta file into single sequences, where: 1) If -o/--output is defined, a directory is created accordingly. 2) If -o/--output is not defined, a directory is created IN THE SAME PATH where the input file resides In both cases splitted files are named after file name. A similar behavior can be expected if data comes from STDIN and not from a file: 4) If -o/--output is defined, a directory is created accordingly. 5) If -o/--output is not defined a directory named \"stdin.split\" is created. In both cases splitted files are prefixed with \"stdin.part_\" If input is a compressed file, each outputed individual file is also compressed. Example cat file.fasta >A AGCT >B TTTT BBfile_multiple_fasta_to_singles \"./file.fasta[.gz]\" #Output file.fasta[.gz].singles/clear file.part_A.fasta[.gz] file.part_B.fasta[.gz] Exit codes 0 : 1 BBfile::uncompress Uncompresses a gunzipped file Example BBfile::uncompress file.gz #Output The uncompressed file to STDOUT Exit codes 0 : on success 1 : on failure BBfile::guess_sequence_type Checks if a file is nucleotide or protein. Example file::guess_sequence_type \"./file.fasta\" #Output 0 Arguments $1 (path): to fasta file. Exit codes 0 : 1 : 2 :","title":"File"},{"location":"BBfile/#biobash-file","text":"","title":"BioBash File"},{"location":"BBfile/#overview","text":"This module contains functions to operate over bioinformatics files not over its content (for that matter BBFormat or BBSeq could be a better option). For general operations over files of any kind refer to bb_utility/io.sh file.","title":"Overview"},{"location":"BBfile/#index","text":"BBfile::is_fasta BBfile::is_multiple_fasta BBfile::is_fastq BBfile::fastq_to_fasta BBfile::multiple_fasta_to_singles BBfile::uncompress BBfile::guess_sequence_type","title":"Index"},{"location":"BBfile/#bbfileis_fasta","text":"Checks if a file is valid fasta file.","title":"BBfile::is_fasta"},{"location":"BBfile/#example","text":"file::file_is_fasta -i/--input \"./file.fa[,fasta]\" #Output Returns 0 if file is fasta, 1 if it is not.","title":"Example"},{"location":"BBfile/#exit-codes","text":"0 : On success 1 : On failure","title":"Exit codes"},{"location":"BBfile/#bbfileis_multiple_fasta","text":"Checks if a file is a valid multiple fasta.","title":"BBfile::is_multiple_fasta"},{"location":"BBfile/#example_1","text":"file::file_is_multiple_fasta -i/--input file.fa[,fasta] #Output 0","title":"Example"},{"location":"BBfile/#exit-codes_1","text":"0 : 1 :","title":"Exit codes"},{"location":"BBfile/#bbfileis_fastq","text":"Checks if a file is valid fastq file.","title":"BBfile::is_fastq"},{"location":"BBfile/#example_2","text":"file::is_fastq \"./file.fq\" #Output 0","title":"Example"},{"location":"BBfile/#arguments","text":"$1 (path): to fastq file.","title":"Arguments"},{"location":"BBfile/#exit-codes_2","text":"0 : 1 : 2 :","title":"Exit codes"},{"location":"BBfile/#bbfilefastq_to_fasta","text":"Transforms a fastq file into a fasta file. if only the fastq file argument is given it outputs the fasta format in STDOUT. This input file can be compressed in gz format. If a second (optional) argument is given (a string containing the desired name for FASTA output file) STDOUT is then redirected to a file. If the string has a \".gz\" extension, the output is also compressed.","title":"BBfile::fastq_to_fasta"},{"location":"BBfile/#example_3","text":"BBfile_fastq_to_fasta \"./file.fastq[.gz]\" #Output file in FASTA format in STDOUT #Example 2 BBfile_fastq_to_fasta \"./file.fastq[.gz]\" file.fa[.gz] #Output ./file.fa[.gz]","title":"Example"},{"location":"BBfile/#exit-codes_3","text":"0 : On succes 1 : On failure","title":"Exit codes"},{"location":"BBfile/#bbfilemultiple_fasta_to_singles","text":"Splits a multiple fasta file into single sequences, where: 1) If -o/--output is defined, a directory is created accordingly. 2) If -o/--output is not defined, a directory is created IN THE SAME PATH where the input file resides In both cases splitted files are named after file name. A similar behavior can be expected if data comes from STDIN and not from a file: 4) If -o/--output is defined, a directory is created accordingly. 5) If -o/--output is not defined a directory named \"stdin.split\" is created. In both cases splitted files are prefixed with \"stdin.part_\" If input is a compressed file, each outputed individual file is also compressed.","title":"BBfile::multiple_fasta_to_singles"},{"location":"BBfile/#example_4","text":"cat file.fasta >A AGCT >B TTTT BBfile_multiple_fasta_to_singles \"./file.fasta[.gz]\" #Output file.fasta[.gz].singles/clear file.part_A.fasta[.gz] file.part_B.fasta[.gz]","title":"Example"},{"location":"BBfile/#exit-codes_4","text":"0 : 1","title":"Exit codes"},{"location":"BBfile/#bbfileuncompress","text":"Uncompresses a gunzipped file","title":"BBfile::uncompress"},{"location":"BBfile/#example_5","text":"BBfile::uncompress file.gz #Output The uncompressed file to STDOUT","title":"Example"},{"location":"BBfile/#exit-codes_5","text":"0 : on success 1 : on failure","title":"Exit codes"},{"location":"BBfile/#bbfileguess_sequence_type","text":"Checks if a file is nucleotide or protein.","title":"BBfile::guess_sequence_type"},{"location":"BBfile/#example_6","text":"file::guess_sequence_type \"./file.fasta\" #Output 0","title":"Example"},{"location":"BBfile/#arguments_1","text":"$1 (path): to fasta file.","title":"Arguments"},{"location":"BBfile/#exit-codes_6","text":"0 : 1 : 2 :","title":"Exit codes"},{"location":"BBgraphics/","text":"BioBash Graphics","title":"Graphics"},{"location":"BBgraphics/#biobash-graphics","text":"","title":"BioBash Graphics"},{"location":"BBindex/","text":"BioBash Index","title":"Indexing"},{"location":"BBindex/#biobash-index","text":"","title":"BioBash Index"},{"location":"BBseq/","text":"BioBash Sequence This module contains functions to operate over sequences itself (DNA/RNA/Protein) Overview BIOBASH module Index BBSeq::get_fasta_components BBSeq::get_fastq_quality BBSeq::get_fasta_components This function retrieves different parts of fasta file. A fasta file has three main components: 1) The header (which begins with the \">\" sign) 2) The sequence ID (which is part of the header)* 3) The sequences itself The porpouse of this function is to retrieve that information individually, wether from a multiple or single sequence file. Please note that it is assumed that Sequence ID is ANY STRING in the fasta header between the \">\" sign and the first space. So in a header like: KY560197.1 Acipenser ruthenus ApoE (apoE) mRNA, partial cds It is assumed that KY560197.1 is the sequence ID. Example Invoked without modifiers shows all info: BBSeq::get_fasta_components -i \"./file.fa[,fasta]\" Output (tab separated one row per sequence) SeqID Description Sequence When invoked with a modifier (-h, -d and/or -s) Displays appropriate info: -h: header, -d sequence ID, -s Sequences @arg -i/--input (required) path to a file. @arg -h/--header (optional) Show fasta header. @arg -d/--id (optional) Show sequence ID. @arg -s/--sequence (optional) Show sequence. @arg -j/--jobs (optional) Number of CPU cores to use. Exit codes 0 : on success 1 : on failure BBSeq::get_fastq_quality This function takes a fastq file as input and returns the average quality for each sequence in input file. Alternatively it will return a quality resume: the average of all summed sequences, max and min quality scores, and number of sequences. Example Display each sequence quality average BBSeq::get_fastq_quality -i file.fastq 8.51 10.43 7.27 8.66 7.75 8.85 8.19 Display quality report BBSeq::get_fastq_quality -i file.fastq --report File name numseqs sumlen minlen avg_len max_len Q20(%) Q30(%) example.fastq 4437 883678 115 199.2 438 26.63 6.09 Exit codes 0 : on success 1 : on failure","title":"Sequence"},{"location":"BBseq/#biobash-sequence","text":"This module contains functions to operate over sequences itself (DNA/RNA/Protein)","title":"BioBash Sequence"},{"location":"BBseq/#overview","text":"BIOBASH module","title":"Overview"},{"location":"BBseq/#index","text":"BBSeq::get_fasta_components BBSeq::get_fastq_quality","title":"Index"},{"location":"BBseq/#bbseqget_fasta_components","text":"This function retrieves different parts of fasta file. A fasta file has three main components: 1) The header (which begins with the \">\" sign) 2) The sequence ID (which is part of the header)* 3) The sequences itself The porpouse of this function is to retrieve that information individually, wether from a multiple or single sequence file. Please note that it is assumed that Sequence ID is ANY STRING in the fasta header between the \">\" sign and the first space. So in a header like: KY560197.1 Acipenser ruthenus ApoE (apoE) mRNA, partial cds It is assumed that KY560197.1 is the sequence ID.","title":"BBSeq::get_fasta_components"},{"location":"BBseq/#example","text":"Invoked without modifiers shows all info: BBSeq::get_fasta_components -i \"./file.fa[,fasta]\" Output (tab separated one row per sequence) SeqID Description Sequence When invoked with a modifier (-h, -d and/or -s) Displays appropriate info: -h: header, -d sequence ID, -s Sequences @arg -i/--input (required) path to a file. @arg -h/--header (optional) Show fasta header. @arg -d/--id (optional) Show sequence ID. @arg -s/--sequence (optional) Show sequence. @arg -j/--jobs (optional) Number of CPU cores to use.","title":"Example"},{"location":"BBseq/#exit-codes","text":"0 : on success 1 : on failure","title":"Exit codes"},{"location":"BBseq/#bbseqget_fastq_quality","text":"This function takes a fastq file as input and returns the average quality for each sequence in input file. Alternatively it will return a quality resume: the average of all summed sequences, max and min quality scores, and number of sequences.","title":"BBSeq::get_fastq_quality"},{"location":"BBseq/#example_1","text":"Display each sequence quality average BBSeq::get_fastq_quality -i file.fastq 8.51 10.43 7.27 8.66 7.75 8.85 8.19 Display quality report BBSeq::get_fastq_quality -i file.fastq --report File name numseqs sumlen minlen avg_len max_len Q20(%) Q30(%) example.fastq 4437 883678 115 199.2 438 26.63 6.09","title":"Example"},{"location":"BBseq/#exit-codes_1","text":"0 : on success 1 : on failure","title":"Exit codes"},{"location":"BBvariation/","text":"BioBash Variation","title":"Variation"},{"location":"BBvariation/#biobash-variation","text":"","title":"BioBash Variation"}]}